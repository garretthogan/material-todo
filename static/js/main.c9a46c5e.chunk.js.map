{"version":3,"sources":["assets/apple-touch-icon.png","App.js","graphql/mutations.js","graphql/queries.js","aws-exports.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","createNewTodo","name","API","graphql","graphqlOperation","input","id","shortid","generate","description","updateDescription","todo","Object","objectSpread","deleteTodo","getAllTodos","then","response","data","listTodos","items","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","key","event","setState","defineProperty","target","value","createTodo","finishEdit","newTodo","state","length","isLoading","prevState","todos","concat","toConsumableArray","newTodoDescription","todoBeingEdited","index","todoToDelete","splice","editTodo","_this$state","updateTodo","_this2","_this3","username","authData","react_default","a","createElement","AppBar_default","color","position","Toolbar_default","Typography_default","variant","style","paddingLeft","alt","maxWidth","src","writingIcon","fontSize","float","padding","Input_default","placeholder","onChange","fullWidth","Button_default","onClick","map","i","index_es","direction","in","Card_default","EditOutlined_default","DeleteOutlined_default","OfflineBoltOutlined_default","autoFocus","onBlur","Component","withAuthenticator","awsmobile","aws_project_region","aws_cognito_identity_pool_id","aws_cognito_region","aws_user_pools_id","aws_user_pools_web_client_id","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","aws_appsync_apiKey","Boolean","window","location","hostname","match","Amplify","configure","aws_exports","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9a46c5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/apple-touch-icon.4ec7d8e7.png\";","import { CardContent, Slide } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport Input from '@material-ui/core/Input';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport OfflineBoltOutlinedIcon from '@material-ui/icons/OfflineBoltOutlined';\nimport React, { Component } from 'react';\nimport { withAuthenticator } from 'aws-amplify-react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport * as mutations from './graphql/mutations';\nimport shortid from 'shortid';\n\nimport * as queries from './graphql/queries';\n\nimport writingIcon from './assets/apple-touch-icon.png';\n\nconst createNewTodo = name =>\n  API.graphql(\n    graphqlOperation(mutations.createTodo, {\n      input: { id: shortid.generate(), name: name, description: 'N/A' }\n    })\n  );\n\nconst updateDescription = (description, todo) =>\n  API.graphql(\n    graphqlOperation(mutations.updateTodo, { input: { ...todo, description } })\n  );\n\nconst deleteTodo = todo =>\n  API.graphql(\n    graphqlOperation(mutations.deleteTodo, {\n      input: { id: todo.id }\n    })\n  );\n\nconst getAllTodos = () =>\n  API.graphql(graphqlOperation(queries.listTodos)).then(\n    response => response.data.listTodos.items\n  );\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      newTodo: '',\n      newTodoDescription: '',\n      todoBeingEdited: -1,\n      todos: []\n    };\n  }\n  componentWillMount() {\n    getAllTodos().then(response => {\n      this.setState({ todos: response, isLoading: false });\n    });\n  }\n  handleInput = key => event => {\n    this.setState({ [key]: event.target.value });\n  };\n  createTodo = () => {\n    this.finishEdit();\n    const { newTodo } = this.state;\n    if (newTodo.length > 0) {\n      this.setState({ isLoading: true });\n      createNewTodo(newTodo).then(response => {\n        this.setState(prevState => ({\n          todos: [...prevState.todos, response.data.createTodo],\n          newTodo: '',\n          newTodoDescription: '',\n          todoBeingEdited: prevState.todos.length,\n          isLoading: false\n        }));\n      });\n    }\n  };\n  deleteTodo = index => () => {\n    this.finishEdit();\n    const todos = this.state.todos;\n    const todoToDelete = todos.splice(index, 1)[0];\n    this.setState({ isLoading: true });\n    deleteTodo(todoToDelete)\n      .then(getAllTodos)\n      .then(response => {\n        this.setState({ todos: response, isLoading: false });\n      });\n  };\n  editTodo = index => () => {\n    this.finishEdit();\n    this.setState(prevState => ({\n      todoBeingEdited: index,\n      newTodoDescription: prevState.todos[index].description\n    }));\n  };\n  finishEdit = () => {\n    const { todoBeingEdited, todos, newTodoDescription } = this.state;\n    const todo = this.state.todos[todoBeingEdited];\n    if (todoBeingEdited > -1 && todos.length > 0 && todo) {\n      this.setState({ isLoading: true });\n      updateDescription(newTodoDescription, todo).then(response => {\n        todos.splice(todoBeingEdited, 1, response.data.updateTodo);\n        this.setState({ todos, todoBeingEdited: -1, isLoading: false });\n      });\n    }\n  };\n  render() {\n    const {\n      authData: { username }\n    } = this.props;\n    return (\n      <div>\n        <AppBar color=\"default\" position=\"static\">\n          <Toolbar>\n            <Typography variant=\"title\">Material To Do </Typography>\n            <div style={{ paddingLeft: 4 }}>\n              <img alt=\"writing\" style={{ maxWidth: 24 }} src={writingIcon} />\n            </div>\n            &nbsp;\n            <Typography\n              variant=\"display1\"\n              style={{ fontSize: 14, float: 'right' }}\n            >\n              {username}\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <div style={{ padding: 12 }}>\n          <Input\n            placeholder=\"Go to the store\"\n            onChange={this.handleInput('newTodo')}\n            value={this.state.newTodo}\n            fullWidth\n          />\n        </div>\n        <div style={{ padding: 12 }}>\n          <Button\n            onClick={this.createTodo}\n            fullWidth\n            variant=\"outlined\"\n            color=\"primary\"\n          >\n            Create\n          </Button>\n        </div>\n        <div style={{ padding: 4 }}>\n          {this.state.todos.map((todo, i) => (\n            <div style={{ padding: 4 }} key={i}>\n              <Slide direction=\"right\" in>\n                <Card>\n                  <CardContent>\n                    <Typography onClick={this.finishEdit} variant=\"subheading\">\n                      {todo.name}\n                      <EditOutlinedIcon\n                        style={{ float: 'right', padding: 4 }}\n                        onClick={this.editTodo(i)}\n                      />\n                      <DeleteOutlinedIcon\n                        style={{ float: 'right', padding: 4 }}\n                        onClick={this.deleteTodo(i)}\n                      />\n                      {this.state.todoBeingEdited === i && (\n                        <OfflineBoltOutlinedIcon\n                          style={{ float: 'right', padding: 4 }}\n                        />\n                      )}\n                    </Typography>\n                    {this.state.todoBeingEdited === i ? (\n                      <Input\n                        autoFocus\n                        placeholder=\"Describe your to do...\"\n                        onChange={this.handleInput('newTodoDescription')}\n                        onBlur={this.finishEdit}\n                        value={this.state.newTodoDescription}\n                        fullWidth\n                      />\n                    ) : (\n                      <Typography onClick={this.editTodo(i)}>\n                        {todo.description || 'Description goes here...'}\n                      </Typography>\n                    )}\n                  </CardContent>\n                </Card>\n              </Slide>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withAuthenticator(App);\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const createTodo = `mutation CreateTodo($input: CreateTodoInput!) {\n  createTodo(input: $input) {\n    id\n    name\n    description\n  }\n}\n`;\nexport const updateTodo = `mutation UpdateTodo($input: UpdateTodoInput!) {\n  updateTodo(input: $input) {\n    id\n    name\n    description\n  }\n}\n`;\nexport const deleteTodo = `mutation DeleteTodo($input: DeleteTodoInput!) {\n  deleteTodo(input: $input) {\n    id\n    name\n    description\n  }\n}\n`;\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const getTodo = `query GetTodo($id: ID!) {\n  getTodo(id: $id) {\n    id\n    name\n    description\n  }\n}\n`;\nexport const listTodos = `query ListTodos(\n  $filter: ModelTodoFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listTodos(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      name\n      description\n    }\n    nextToken\n  }\n}\n`;\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile =  {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:bbad683d-d791-4df7-80d7-4ef017d43e8a\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_wT6d3kjpm\",\n    \"aws_user_pools_web_client_id\": \"7aoq2svspmdj1tulsr94pa2h2j\",\n    \"aws_appsync_graphqlEndpoint\": \"https://xbcczlzx2bazrhr23koqxjvvy4.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-664rt737j5gihpir7yqmfu2ypa\"\n};\n\n\nexport default awsmobile;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './index.css';\n\nimport Amplify from 'aws-amplify';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport aws_exports from './aws-exports';\nimport * as serviceWorker from './serviceWorker';\n\nAmplify.configure(aws_exports);\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}