{"version":3,"sources":["App.js","serviceWorker.js","index.js","assets/apple-touch-icon.png"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","key","event","setState","defineProperty","target","value","createTodo","state","newTodo","length","prevState","todos","concat","toConsumableArray","title","description","newTodoDescription","todoBeingEdited","deleteTodo","index","splice","editTodo","finishEdit","_this$state","todoEdited","_this2","react_default","a","createElement","AppBar_default","color","position","Toolbar_default","Typography_default","variant","style","paddingLeft","maxWidth","src","writingIcon","padding","Input_default","placeholder","onChange","fullWidth","Button_default","onClick","map","todo","i","Card_default","index_es","EditOutlined_default","float","DeleteOutlined_default","autoFocus","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.b62aa885.chunk.js","sourcesContent":["import { CardContent } from '@material-ui/core';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport Input from '@material-ui/core/Input';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\nimport React, { Component } from 'react';\n\nimport writingIcon from './assets/apple-touch-icon.png';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newTodo: '',\n      newTodoDescription: '',\n      todoBeingEdited: -1,\n      todos: []\n    };\n  }\n  handleInput = key => event => {\n    this.setState({ [key]: event.target.value });\n  };\n  createTodo = () => {\n    const { newTodo } = this.state;\n    if (newTodo.length > 0) {\n      this.setState(prevState => ({\n        todos: [\n          ...prevState.todos,\n          { title: this.state.newTodo, description: '' }\n        ],\n        newTodo: '',\n        newTodoDescription: '',\n        todoBeingEdited: prevState.todos.length\n      }));\n    }\n  };\n  deleteTodo = index => () => {\n    const todos = this.state.todos;\n    todos.splice(index, 1);\n    this.setState({ todos });\n  };\n  editTodo = index => () => {\n    this.setState({ todoBeingEdited: index });\n  };\n  finishEdit = () => {\n    const { todoBeingEdited, todos, newTodoDescription } = this.state;\n    if (todoBeingEdited > -1 && todos.length > 0) {\n      const todo = this.state.todos[todoBeingEdited];\n      const todoEdited = {\n        title: todo.title,\n        description: newTodoDescription\n      };\n\n      todos.splice(todoBeingEdited, 1, todoEdited);\n      this.setState({ todos, todoBeingEdited: -1 });\n    }\n  };\n  render() {\n    return (\n      <div>\n        <AppBar color=\"default\" position=\"static\">\n          <Toolbar>\n            <Typography variant=\"title\">Material To Do </Typography>\n            <div style={{ paddingLeft: 4 }}>\n              <img style={{ maxWidth: 24 }} src={writingIcon} />\n            </div>\n          </Toolbar>\n        </AppBar>\n        <div style={{ padding: 12 }}>\n          <Input\n            placeholder=\"Go to the store\"\n            onChange={this.handleInput('newTodo')}\n            value={this.state.newTodo}\n            fullWidth\n          />\n        </div>\n        <div style={{ padding: 12 }}>\n          <Button\n            onClick={this.createTodo}\n            fullWidth\n            variant=\"outlined\"\n            color=\"primary\"\n          >\n            Create\n          </Button>\n        </div>\n        <div style={{ padding: 4 }}>\n          {this.state.todos.map((todo, i) => (\n            <div style={{ padding: 4 }} key={i}>\n              <Card>\n                <CardContent>\n                  <Typography onClick={this.finishEdit} variant=\"subheading\">\n                    {todo.title}\n                    <EditOutlinedIcon\n                      style={{ float: 'right', padding: 4 }}\n                      onClick={this.editTodo(i)}\n                    />\n                    <DeleteOutlinedIcon\n                      style={{ float: 'right', padding: 4 }}\n                      onClick={this.deleteTodo(i)}\n                    />\n                  </Typography>\n                  {this.state.todoBeingEdited === i ? (\n                    <Input\n                      autoFocus\n                      placeholder=\"Describe your to do...\"\n                      onChange={this.handleInput('newTodoDescription')}\n                      value={this.state.newTodoDescription}\n                      fullWidth\n                    />\n                  ) : (\n                    <Typography onClick={this.editTodo(i)}>\n                      {todo.description || 'Description goes here...'}\n                    </Typography>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/apple-touch-icon.4ec7d8e7.png\";"],"sourceRoot":""}